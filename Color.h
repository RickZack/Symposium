/*
 * Copyright (c) 2019 Riccardo Zaccone, Ksenia Del Conte Akimova, Cristian Gianetto, Martina Bellissimo
 *
 * This file is part of Symposium.
 * Symposium is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Symposium is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with Symposium.  If not, see <http://www.gnu.org/licenses/>.
 */

/* 
 * File:   Color.h
 * Project: Symposium
  * Authors: 
 *          Riccardo Zaccone <riccardo.zaccone at studenti.polito.it>
 *          Ksenia Del Conte Akimova <s256669 at studenti.polito.it>
 *          Cristian Gianetto <s265387 at studenti.polito.it>
 *          Martina Bellissimo <s257307 at studenti.polito.it>
 *
 * Created on 24 marzo 2020, 18:07
 */
#ifndef SYMPOSIUM_COLOR_H
#define SYMPOSIUM_COLOR_H


#include <string>
#include <tuple>
#include <random>
#include <ctime>

namespace Symposium {

    /**
     * @brief Represent a color in RGB encoding
     */
    struct Color {
        std::tuple<uint8_t, uint8_t, uint8_t> rgb_dec; /**< A triplet containing the values for RGB encoding*/

        Color();

        Color(uint8_t r, uint8_t g, uint8_t b);

        std::string rgb_hex_string();

        bool operator==(const Color &rhs) const;

        bool operator!=(const Color &rhs) const;

    };

    /**
     * @brief Color generator for users in Symposium system as functor
     *
     * An object of this class is used to generate a color for a user: every time a functor of
     * this class is invoked it returns a @ref Color that is the most perceptually different
     * with respect to the others generated by the same functor.
     */
    class colorGen {
        double token;                                     /**< A random semen for the first color generated */
        static constexpr double grc = 0.618033988749895;    /**< It is the inverse of the golden ratio */

    public:
        colorGen();

        Color operator()();

        /**
         * @brief Converts a color encoded in HSV to RGB
         * @param h hue parameter of HSV encoding
         * @param s saturation parameter of HSV encoding
         * @param v value parameter of HSV encoding
         * @return a corresponding RGB encoding through a @ref Color
         */
        static Color hsv_to_rbg(double h, double s, double v);
    };
}


#endif //SYMPOSIUM_COLOR_H
